(window.webpackJsonp=window.webpackJsonp||[]).push([[97],{547:function(t,a,s){"use strict";s.r(a);var r=s(36),e=Object(r.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"认证"}},[t._v("认证")]),t._v(" "),s("p",[t._v("认证，以及下文谈论的授权，认证是一个系统中最基础的功能，目的是为了弄清你是谁 (认证)，你能被授予权限去干什么 (授权)，如果证明是你 (凭证)")]),t._v(" "),s("ul",[s("li",[t._v("通信信道上的认证，在建立通信连接之前先证明是谁，tls 传输安全层的认证")]),t._v(" "),s("li",[t._v("通信协议上的认证，请求资源之前先证明是谁，http 协议")]),t._v(" "),s("li",[t._v("通信内容上的认证，你使用我的服务之前先证明是谁，web 内容上的认证")])]),t._v(" "),s("p",[t._v("一个架构设计上的安全标准是：以规范标准为指导，以规范标准接口去实现，严格遵循标准就是最安全的安全设计方法。")]),t._v(" "),s("h2",{attrs:{id:"http-认证"}},[t._v("HTTP 认证")]),t._v(" "),s("p",[t._v("比如在未授权的用户意图访问受保护的资源时，服务器会返回一个 401 状态码，同时需要在相应报文头中附带两个分别代表网页认证和代理认证的 Header，告诉客户端应该采取何种方法才能代表访问者的身份凭证，401 的响应报头：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("www-Authorization: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("认证方案"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("realm")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("保护区域描述信息"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \nProxy-Authorization: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("认证方案"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token assign-left variable"}},[t._v("realm")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("保护区域描述信息"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" \n")])])]),s("p",[t._v("接收到响应之后，客户端必须遵循服务端制定的认证方案添加身份验证信息，否则将返回 403 Forbidden 错误，这是请求报头：")]),t._v(" "),s("div",{staticClass:"language-bash extra-class"},[s("pre",{pre:!0,attrs:{class:"language-bash"}},[s("code",[t._v("Authenticate: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("认证方案"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("凭证内容"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\nProxy-Authenticate: "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("认证方案"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v("凭证内容"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])]),s("p",[t._v("http 认证框架中的认证方案允许自行扩展，并不一定要求按照 RFC 规范，只要用户代理 (泛指使用 http 协议的程序，比如浏览器，比如某个 App) 能够识别这种私有的认证方案即可，比如：")]),t._v(" "),s("ul",[s("li",[t._v("Aws4-Hmac-Sha256：亚马逊 aws 基于 hmac-sha256 的认证")]),t._v(" "),s("li",[t._v("Basic：http 基础认证 (主要用于演示，无法投入生产环境)")]),t._v(" "),s("li",[t._v("Twitter Basic：Twitter 改良的 http 基础认证")])]),t._v(" "),s("h2",{attrs:{id:"web-认证"}},[t._v("web 认证")]),t._v(" "),s("p",[t._v("又叫做表单认证，这种认证方案比上文提到的 http 认证用的更多。")]),t._v(" "),s("p",[t._v("表单认证是没有标准的，你可以任意设计，只要能验证身份即可。")]),t._v(" "),s("p",[t._v("新的认证方案：")]),t._v(" "),s("p",[t._v("webAuthn：浏览器支持的认证方案，基于密码凭证，支持生物识别，比如指纹，人脸识别等。WebAuthn 彻底抛弃了传统的密码登录方式，改为直接采用生物识别 (指纹、人脸、虹膜、声纹) 或者实体密钥 (以 USB、蓝牙、NFC 连接的物理密钥容器) 来作为身份凭证，从根本上消灭了用户输入错误产生的校验需求和防止机器人模拟产生的验证码需求等问题，甚至可以省掉表单界面")])])}),[],!1,null,null,null);a.default=e.exports}}]);