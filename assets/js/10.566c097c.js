(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{443:function(v,_,t){v.exports=t.p+"assets/img/rbac.1432b9a3.svg"},444:function(v,_,t){v.exports=t.p+"assets/img/oauth2-1.d971cece.svg"},545:function(v,_,t){"use strict";t.r(_);var p=t(36),a=Object(p.a)({},(function(){var v=this,_=v.$createElement,p=v._self._c||_;return p("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[p("h1",{attrs:{id:"授权"}},[v._v("授权")]),v._v(" "),p("ul",[p("li",[v._v("RBAC")]),v._v(" "),p("li",[v._v("OAuth2")])]),v._v(" "),p("p",[v._v("授权主要包括两个方面：")]),v._v(" "),p("ul",[p("li",[v._v("确保授权的过程可靠，常见的多方授权协议，如 OAuth2，saml2 等")]),v._v(" "),p("li",[v._v("确保授权的结果可控")])]),v._v(" "),p("h2",{attrs:{id:"rbac"}},[v._v("RBAC")]),v._v(" "),p("p",[v._v("谁拥有什么权限去操作那些资源")]),v._v(" "),p("p",[p("img",{attrs:{src:t(443),alt:"rbac"}})]),v._v(" "),p("p",[v._v("rbac 满足计算机安全的最小特权原则，在 rbac 模型中，角色拥有许可的数量是根据完成该角色工作职责的最小权限来赋予的，比如分为管理员，系统用户，普通用户等。")]),v._v(" "),p("p",[v._v("rbac 还允许不同角色之间可以定义关联和约束，不同的角色之间拥有继承性，比如开发经理的角色就可以直接从公司员工中去派生。开发经理继承了公司员工的所有权限并且添加了开发最高权限。")]),v._v(" "),p("p",[v._v("rbac 模型也支持了互斥性，比如不能让一名员工又是会计又是出纳，可以限制最大角色的继承数量。")]),v._v(" "),p("p",[v._v("通过 RBAC 很容易控制最终用户在广义和精细级别上能够做什么，可以指定用户是管理员、专家用户抑或普通用户，并使角色和访问权限与组织中员工的身份职位保持一致，仅根据需要为员工完成工作的最低限度来分配权限")]),v._v(" "),p("h2",{attrs:{id:"oauth2"}},[v._v("OAuth2")]),v._v(" "),p("p",[v._v("OAuth2 是一个开放标准，它允许用户授权第三方应用访问受保护的资源，而无需将用户名和密码提供给第三方应用。")]),v._v(" "),p("p",[v._v("OAuth2 是面向于解决第三方应用的认证授权协议，如果系统不涉及到第三方应用，那么就不需要考虑 OAuth2。")]),v._v(" "),p("p",[v._v("OAuth2 的基本方法是使用令牌代替用户密码作为授权的凭证，有了令牌之后，即便是令牌被泄露也不会泄露密码。")]),v._v(" "),p("p",[p("img",{attrs:{src:t(444),alt:"oauth2-1"}})]),v._v(" "),p("p",[v._v("OAuth2 主要包含以下几个模式：")]),v._v(" "),p("ul",[p("li",[v._v("授权码模式")]),v._v(" "),p("li",[v._v("隐私授权模式")]),v._v(" "),p("li",[v._v("密码模式")]),v._v(" "),p("li",[v._v("客户端模式")])]),v._v(" "),p("h3",{attrs:{id:"授权码模式"}},[v._v("授权码模式")]),v._v(" "),p("p",[v._v("这种模式比较的安全，但是稍微麻烦，我们就举个例子吧，当你使用拼多多时来进行微信登录账号，首先，你 (资源所有者)，通过操作代理 (拼多多 App) 看到了微信登录按钮 (拼多多是第三方应用)，点击微信登录按钮进入了微信授权界面 (授权服务器)，当用户认证之后，授权服务器按照第三方应用 (拼多多等 App，应该是将回调设置在了微信界面) 的回调地址，附带授权码，微信 App 将授权码发送给微信后台的授权服务器换取了令牌，然后微信根据令牌获取了你的电话号码 (从微信后台服务器获取)，微信后台服务器将数据返回给微信操作界面，然后再返回给拼多多，登录成功。")]),v._v(" "),p("p",[v._v("这里，微信提供了两个服务")]),v._v(" "),p("ul",[p("li",[v._v("微信授权服务器")]),v._v(" "),p("li",[v._v("微信后台")])]),v._v(" "),p("p",[v._v("在开始授权之前，第三方应用应该先到授权服务器上去注册，提供一个回调地址，并且获取授权服务器给予的 ClientID 和 ClientSecret")]),v._v(" "),p("p",[v._v("所以前面描述的，第三方应用 (拼多多 App) 将用户导向授权服务器的页面时，它给服务器提供了 ClientID 以及回调 URL，当然实际操作中拼多多是实际注册人，微信客户端是代为充当了第三方应用。")]),v._v(" "),p("p",[v._v("会不会有其他应用冒充第三方应用骗取授权？虽然 ClientID 是唯一的，但是它本身是公开的，不过 clientSecret 是私有的，没有密码也是无法完成授权的。")]),v._v(" "),p("p",[v._v("通常来说我们需要两个令牌，一个时限较长的刷新令牌，一个短的访问令牌，当访问令牌过期时，可以通过刷新令牌来获取新的访问令牌。")]),v._v(" "),p("p",[v._v("访问令牌的时效性一般设计的比较短，譬如几个小时，如果还需要继续用，那就定期用刷新令牌去更新，授权服务器就可以在更新过程中决定是否还要继续给予授权")]),v._v(" "),p("p",[v._v("不过这种模式必须要求第三方有自己的服务器，而且要求服务端的地址必须与注册时提供的地址在同一个域内，如果 App 没有服务器呢？这种方案就不合适了。")]),v._v(" "),p("h3",{attrs:{id:"隐私授权模式"}},[v._v("隐私授权模式")]),v._v(" "),p("p",[v._v("隐私授权模式省略掉了通过授权码换取令牌的步骤，直接给于令牌，不过特别强调了令牌必须是 “通过 Fragment 带回” 的")]),v._v(" "),p("blockquote",[p("p",[v._v("Fragment：https://steamaple.com/greenbird/#/detail/1 fragment 就是 # 后面的部分，不算#")])]),v._v(" "),p("p",[v._v("不过这样的话，仍然需要在注册时提供一个回调域名，并且该域名和接收令牌的服务位于一个域内，比如你作为一个微信小程序，你设置的回调域名可能是微信本身的域名，它肯定跟接收令牌的地方是一个域内。")]),v._v(" "),p("h3",{attrs:{id:"密码模式"}},[v._v("密码模式")]),v._v(" "),p("p",[v._v("前面的授权码和隐私模式都不涉及到认证，密码模式涉及到了认证，认证和授权整合在了一起，不过如果使用这种模式，所谓第三方和授权服务器之间应该是非常亲密的关系，不然密码这种关键信息是不可能交给别人的。")]),v._v(" "),p("p",[v._v("这种模式下的全过程是这样的，资源所有人提供密码，第三方应用发送密码给授权服务器，服务器验证之后发送令牌和刷新令牌给第三方应用。")]),v._v(" "),p("h3",{attrs:{id:"客户端模式"}},[v._v("客户端模式")]),v._v(" "),p("p",[v._v("这种模式比较简单，直接把密码发送给授权服务器，或者直接向授权服务器申请令牌，授权服务器验证之后直接返回令牌。也没有第三方了，就俩单位。")]),v._v(" "),p("p",[v._v("客户端模式是一种常见的服务间的认证授权方案，因为微服务架构下，不同的服务之间相对独立，为了安全，微服务并不提倡默认的信任关系，使用客户端模式先认证授权才可以通信")]),v._v(" "),p("p",[v._v("比如，istio 中使用了双向的 mTLS 来保证安全。")])])}),[],!1,null,null,null);_.default=a.exports}}]);