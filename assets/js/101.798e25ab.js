(window.webpackJsonp=window.webpackJsonp||[]).push([[101],{554:function(t,s,a){"use strict";a.r(s);var n=a(36),p=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"http-dns-技术"}},[t._v("HTTP DNS 技术")]),t._v(" "),a("p",[t._v("传统本地 DNS 服务器使用 udp 的方式进行多级查询，每一层都有被钓鱼，被更换属于很多的风险，那么我们的本地 DNS 服务器是否可以改为使用 HTTP 协议呢？是否可以不需要逐层查询直接访问到目标服务器？HTTP DNS 就是基于 HTTP 协议的域名解析服务，它将域名解析请求发送到 HTTP 服务器，HTTP 服务器根据域名解析请求直接返回对应的 ip 地址，从而实现域名解析的功能，从而解决了传统 DNS 服务器多级缓存和 DNS 劫持的问题，你可以理解为 HTTP DNS 仿佛一个代理，它就拥有了所有域名解析的功能，并且可以做到无中间商，阿里的 "),a("a",{attrs:{href:"https://www.alibabacloud.com/help/zh/dns/what-is-alibaba-cloud-public-dns",target:"_blank",rel:"noopener noreferrer"}},[t._v("HTTP DNS"),a("OutboundLink")],1),t._v(" 介绍在这里")]),t._v(" "),a("h2",{attrs:{id:"使用-dns-的弊端"}},[t._v("使用 dns 的弊端")]),t._v(" "),a("ol",[a("li",[t._v("传统的 local DNS 服务尽管拥有缓存机制，但不可避免的还是会有递归查询的问题，这严重的影响了响应时间")]),t._v(" "),a("li",[t._v("权威 dns 服务是针对本地域名服务器的 ip 去返回 ip 的，这跟真实用户的 ip 地址不同，严重影响了负载均衡的本意")]),t._v(" "),a("li",[t._v("DNS 劫持，给你一个假网站，运营商通过本地域名服务器直接给你造假 DNS 劫持，黑客选择篡改计算器的 Hosts 去 dns 劫持")])]),t._v(" "),a("h2",{attrs:{id:"http-dns-的原理"}},[t._v("HTTP DNS 的原理")]),t._v(" "),a("p",[t._v("客户端使用 http DNS 去解析域名，HTTP DNS 如果有缓存直接返回，如果没有它会去权威 DNS 服务器发起域名解析请求，并返回最优 ip，这其中减少了去根 dns，顶层 dns 的访问，客户端可能发送一个类似于 “http://11.1.1.1/?dn=[domain_name]” 的请求，其中 “[domain_name]” 是要解析的域名，如果你需要更加安全，也可以将此处的 http 改成 https")]),t._v(" "),a("p",[t._v("客户端通过访问一个固定的 HTTP DNS IP 地址去解析域名，不是通过一个域名 (如果通过域名还不是还得解析这个域名的 ip 嘛。。。对吧)")]),t._v(" "),a("p",[t._v("为了保证高性能和高可用，HTTP DNS 通过 BGP 边界网关协议让这个 ip 地址让全国的运营商客户都能就近访问，同时多个数据中心部署多个 HTTP DNS 服务节点，主备方案，任意节点故障均可切换备份节点")]),t._v(" "),a("h2",{attrs:{id:"配置高可用的-dns-服务-包括-http-dns-和-local-dns"}},[t._v("配置高可用的 DNS 服务 --- 包括 HTTP DNS 和 local DNS")]),t._v(" "),a("ol",[a("li",[t._v("首先我们优先在客户端布置 HTTP DNS 服务")]),t._v(" "),a("li",[t._v("为了防止 HTTP DNS 服务器故障，我们可以在 HTTP DNS 后面部署传统的 local DNS 服务")]),t._v(" "),a("li",[t._v("HTTP DNS 服务可以返回多个 ip 地址，我们可以逐个测试连通性，不通就换下一个")]),t._v(" "),a("li",[t._v("如果本地 local DNS 服务也失败了，我们为了高可用，可以在 app 中硬写入一个映射表，写入一些兜底的 ip 地址")]),t._v(" "),a("li",[t._v("预请求 IP 并且缓存起来")])]),t._v(" "),a("h2",{attrs:{id:"传统使用-udp-协议的-dns-服务请求代码"}},[t._v("传统使用 UDP 协议的 DNS 服务请求代码")]),t._v(" "),a("div",{staticClass:"language-py extra-class"},[a("pre",{pre:!0,attrs:{class:"language-py"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" struct\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" socket\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("def")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("send_dns_query")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("domain_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" query_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 创建 UDP 套接字")]),t._v("\n    sock "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("AF_INET"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("SOCK_DGRAM"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从这看出来 使用的是 UDP 的传输协议")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 设置 DNS 服务器地址和端口")]),t._v("\n    dns_server "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"8.8.8.8"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("53")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 构造 DNS 请求报文")]),t._v("\n    transaction_id "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x1234")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 可以设置一个随机的事务 ID")]),t._v("\n    flags "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0x0100")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 标准查询，递归查询标志位设为 1")]),t._v("\n    num_questions "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("\n    num_answers "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    num_authority_rrs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n    num_additional_rrs "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理域名，采用域名压缩格式")]),t._v("\n    parts "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" domain_name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("split"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    encoded_domain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('b""')]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" part "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("in")]),t._v(" parts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        encoded_domain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bytes")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("part"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" part"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("encode"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    encoded_domain "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('b"\\x00"')]),t._v("\n\n    query_type_code "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"A"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"AAAA"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("28")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 添加其他查询类型的代码映射")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    qtype "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" query_type_code"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("query_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    qclass "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# IN（Internet）类")]),t._v("\n\n    request "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" struct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('">HHHHHH"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" transaction_id"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num_questions"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num_answers"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num_authority_rrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" num_additional_rrs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    request "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" encoded_domain\n    request "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" struct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("pack"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('">HH"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qtype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" qclass"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 发送请求")]),t._v("\n    sock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("sendto"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("request"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dns_server"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 接收响应")]),t._v("\n    response"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" _ "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("recvfrom"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4096")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 处理响应")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("#...（这里省略处理响应报文的具体代码）")]),t._v("\n\n    sock"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("close"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h2",{attrs:{id:"在浏览器中使用-http-dns"}},[t._v("在浏览器中使用 HTTP DNS")]),t._v(" "),a("p",[t._v("HTTP DNS 通常是为客户端应用程序设计的，而浏览器本身并不直接支持 HTTP DNS\n因此如果要实现 http DNS 通常要使用插件")]),t._v(" "),a("p",[t._v("使用支持 HTTP DNS 的浏览器插件：")]),t._v(" "),a("p",[t._v("一些专门的插件可以在浏览器环境下实现 HTTP DNS 功能。这些插件通常会拦截浏览器的 DNS 请求，然后通过 HTTP 协议将请求发送到特定的 HTTP DNS 服务器进行解析。安装并启用这类插件后，插件会在后台自动处理域名解析，用户无需进行复杂的设置。例如，某些网络优化插件就具备这样的功能，它们可以改善网络访问速度和稳定性，同时防止 DNS 劫持。")]),t._v(" "),a("p",[t._v("浏览器厂商集成 HTTP DNS 功能：")]),t._v(" "),a("p",[t._v("部分先进的浏览器可能会在未来的版本中集成 HTTP DNS 功能。如果浏览器厂商决定支持 HTTP DNS，他们可以在浏览器的设置中提供相应的选项，让用户可以选择启用 HTTP DNS 解析。当用户开启此功能后，浏览器会自动使用 HTTP DNS 服务器进行域名解析，而不再依赖于传统的 DNS 系统。这样可以提高浏览器的安全性和性能，确保用户能够快速、准确地访问网站。")]),t._v(" "),a("p",[t._v("通过网络代理或 VPN 服务：")]),t._v(" "),a("p",[t._v("一些网络代理或 VPN 服务可能会内置 HTTP DNS 功能。当用户连接到这些代理或 VPN 时，它们可以拦截浏览器的网络流量，并使用自己的 HTTP DNS 服务器进行域名解析。这种方式虽然不是直接在浏览器中实现 HTTP DNS，但可以通过第三方服务来实现类似的效果。不过，使用网络代理或 VPN 也可能会带来一些其他问题，如网络速度下降、隐私问题等，因此需要谨慎选择可靠的服务提供商。\n总的来说，目前在浏览器中使用 HTTP DNS 可能需要借助一些额外的工具或服务，但随着技术的发展，未来可能会有更多直接在浏览器中实现 HTTP DNS 的方法出现。")]),t._v(" "),a("h2",{attrs:{id:"在-app-中使用-http-dns"}},[t._v("在 app 中使用 HTTP DNS")]),t._v(" "),a("p",[t._v("许多流行的网络请求库 (如 OkHttp、Volley 等) 支持自定义 DNS 解析器。可以通过编写自定义的 DNS 解析器来实现 HTTP DNS 功能。")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OkHttpClient")]),t._v(" client "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("OkHttpClient"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Builder")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("dns")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("MyHttpDnsResolver")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("build")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("p",[t._v("全局设置 http dns")]),t._v(" "),a("div",{staticClass:"language-java extra-class"},[a("pre",{pre:!0,attrs:{class:"language-java"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("HttpDnsManager")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("getInstance")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("init")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"your_http_dns_server_url"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])])]),a("h2",{attrs:{id:"在-http-dns-中的本地缓存优先级"}},[t._v("在 HTTP DNS 中的本地缓存优先级")]),t._v(" "),a("p",[t._v("HTTP DNS 请求是由应用层直接发起的，而不是通过操作系统的 DNS 解析器。这意味着 HTTP DNS 请求不会经过传统的 DNS 解析路径，包括不会检查 hosts 文件或操作系统的 DNS 缓存")]),t._v(" "),a("p",[t._v("HTTP DNS 场景下的缓存优先级：")]),t._v(" "),a("ol",[a("li",[t._v("HTTP DNS 服务端返回的数据：应用程序直接从 HTTP DNS 服务端获取域名解析结果，并根据返回的信息进行后续操作。")]),t._v(" "),a("li",[t._v("应用程序内部缓存：应用程序可能会在内部缓存 HTTP DNS 返回的结果，以便在一定时间内重复使用这些信息。")])]),t._v(" "),a("p",[t._v("所以 HTTP DNS 系统的本地客户端缓存：")]),t._v(" "),a("ul",[a("li",[t._v("不会检查 /etc/hosts 文件。")]),t._v(" "),a("li",[t._v("不会查询操作系统的 DNS 缓存。")]),t._v(" "),a("li",[t._v("不会依赖浏览器的 DNS 缓存。")])])])}),[],!1,null,null,null);s.default=p.exports}}]);